{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/chat.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport { z } from \"zod\";\n\nconst ChatRequestSchema = z.object({\n  message: z.string(),\n});\n\ninterface OpenAIMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\ninterface OpenAIResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nconst SYSTEM_PROMPT = `You are a helpful AI finance tutor for FintechLearn, an educational platform focused on teaching basic financial literacy. Your role is to help users learn about:\n\n- Budgeting and saving\n- Credit scores and debt management\n- Interest rates (simple vs compound)\n- Loans and mortgages\n- Investment basics (stocks, bonds, mutual funds)\n- Risk vs return\n- Inflation\n- Tax fundamentals\n- Retirement planning (401k, IRA)\n\nGuidelines:\n- Keep responses clear, friendly, and educational\n- Use simple language suitable for beginners\n- Provide practical, actionable advice\n- Stay focused on personal finance topics\n- If asked about topics outside finance, politely redirect to finance education\n- Encourage users to take courses on FintechLearn for deeper learning\n- Always be encouraging and supportive of their financial learning journey\n\nRespond in a conversational, supportive tone as if you're a patient teacher helping a student understand important financial concepts.`;\n\nexport const handleChat: RequestHandler = async (req, res) => {\n  try {\n    // Set CORS headers\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n    res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n      return res.status(200).end();\n    }\n\n    const { message } = ChatRequestSchema.parse(req.body);\n\n    const messages: OpenAIMessage[] = [\n      {\n        role: \"system\",\n        content: SYSTEM_PROMPT,\n      },\n      {\n        role: \"user\",\n        content: message,\n      },\n    ];\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${OPENAI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: messages,\n        max_tokens: 500,\n        temperature: 0.7,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data: OpenAIResponse = await response.json();\n    const aiResponse =\n      data.choices[0]?.message?.content ||\n      \"I'm sorry, I couldn't process your request right now.\";\n\n    res.json({ response: aiResponse });\n  } catch (error) {\n    console.error(\"Chat API error:\", error);\n    res.status(500).json({\n      error: \"I'm having trouble connecting right now. Please try again later.\",\n      response:\n        \"I'm sorry, I'm experiencing technical difficulties. Please try asking your question again, or explore our courses to learn more about personal finance!\",\n    });\n  }\n};\n","import express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleChat } from \"./routes/chat\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"Hello from Express server v2!\" });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // AI Chat endpoint\n  app.post(\"/api/chat\", handleChat);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`ðŸš€ Fusion Starter server running on port ${port}`);\n  console.log(`ðŸ“± Frontend: http://localhost:${port}`);\n  console.log(`ðŸ”§ API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"ðŸ›‘ Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"ðŸ›‘ Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}